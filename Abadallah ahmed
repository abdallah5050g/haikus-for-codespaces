#define SIZE 10
#include<bits/stdc++.h>
#include<iostream>

using namespace std;

class STACK
{
   private:
        int num[SIZE];
        int top;
    public:
        STACK();
        int push(int);
        int isFull();
        void displayItems();
};
STACK::STACK(){
    top=-1;
}



int STACK::isFull(){
    if(top==(SIZE-1))
        return 1;
    else
        return 0;
}

int STACK::push(int n){

    if(isFull()){
        return 0;
    }
    ++top;
    num[top]=n;
    return n;
}



void STACK::displayItems(){
    int i;
    cout<<"STACK is: ";
    for(i=(top); i>=0; i--)
        cout<<num[i]<<" ";
    cout<<endl;
}
class Graph:private STACK
{

int V;
list<int> *adj;
bool DLS(int src, int target, int limit);
public:
Graph(int V);
void addEdge(int src, int des);
bool IDDFS(int src, int target, int max_depth);
};
Graph::Graph(int V)
{
this->V = V;
adj = new list<int>[V];
}
void Graph::addEdge(int src, int des)
{

adj[src].push_back(des);
}
bool Graph::DLS(int src, int target, int limit)
{

if (src == target)
{
push(target);
displayItems();

return true;

}


if (limit <= 0)
return false;


for (auto i = adj[src].begin(); i != adj[src].end(); ++i)
{

if (DLS(*i, target, limit-1) == true)
{


push(src);

if(src==0){
cout<<"The End ";
}
displayItems();
return true;
}
}
return false;
}

bool Graph::IDDFS(int src, int target, int max_depth)
{
for (int i = 0; i <= max_depth; i++)
if (DLS(src, target, i) == true)
return true;
return false;
}

int main()
{

Graph g(6);
g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(1, 3);
g.addEdge(1, 4);
g.addEdge(2, 5);
g.addEdge(2, 6);
int target = 6, maxDepth = 2, src = 0;
cout<<"Abdallah Ahmed Ahmed"<<endl;

if (g.IDDFS(src, target, maxDepth) == true)
cout << "\nTarget is reachable from source "

"within max depth";

else
cout << "Target is NOT reachable from source "

"within max depth";

return 0;
}
